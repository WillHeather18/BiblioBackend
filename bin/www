#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myexpressapp:server');
var http = require('http');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const uri = "mongodb+srv://HEv_18:B0bsnowy66!@bibliobox.eiqrhme.mongodb.net/user_details";
mongoose.connect(uri);

const connection = mongoose.connection;
connection.once('open', () => {
  console.log("MongoDB database connection established successfully");
})

const userSchema = new mongoose.Schema({
    uuid: { type: String, default: uuidv4() },
    email: String,
    password: String,
    accountCreationDate: { type: Date, default: Date.now },
    lastLoginDate: { type: Date, default: Date.now },
  });

  const recommendationSchema = new mongoose.Schema({
    uuid: { type: String, default: uuidv4() },
    recommendations: [String],
});
  
  const User = mongoose.model('User', userSchema);
  const Recommendations = mongoose.model('recommendations', recommendationSchema);

  app.get('/healthcheck', (req, res) => {
    res.status(200).send('Health check passed');
  });

  app.post('/login', async (req, res) => {
    const { email, password } = req.body;
  
    try {
      const user = await User.findOne({ email });

      if (!user) {
        return res.status(400).json({ status: "failure",message: 'User not found' });
      }

      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch) {
          return res.status(400).json({ status: "failure", message: 'Invalid password' });
      }
  
      const token = jwt.sign({ id: user._id }, secretKey, { expiresIn: '1h' });

      const { password: userPassword, ...userWithoutPassword } = user.toObject();

      res.status(200).json({ status: "success", message: 'Logged in successfully', token,  user: userWithoutPassword });
    } catch (err) {
      console.error(err);
      res.status(500).json({ status: "error",message: 'Server error' });
    }
  },
);

// Signup endpoint
app.post('/signup', async (req, res) => {
  const { email, password } = req.body;

  const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;

  if (!emailRegex.test(email)) {
      return res.status(400).json({ status: "failure", message: 'Invalid email format' });
  }

  try {
    console.log(`Creating user with email: ${email}`);
    const existingUser = await User.findOne({ email });

    if (existingUser) {
      return res.status(400).json({ status: "failure", message: 'User already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const user = new User({ email, password: hashedPassword});
    await user.save();

    const token = jwt.sign({ id: user._id }, secretKey, { expiresIn: '1h' });
      res.status(200).json({ status: "success", message: 'User created successfully', token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ status: "error", message: 'Server error' });
  }
});

// Recommendation endpoint
app.get('/recommendations/:uuid', async (req, res) => {
  try {
      const uuid = req.params.uuid;
      const recommendations = await Recommendations.find({ uuid: uuid });

      if (!recommendations || recommendations.length === 0) {
          return res.status(404).json({ status: "failure", message: 'No recommendations found for the provided uuid' });
      }

      res.status(200).json({ status: "success", recommendations: recommendations });
  } catch (err) {
      console.error(err);
      res.status(500).json({ status: "error", message: 'Server error' });
  }
});

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
